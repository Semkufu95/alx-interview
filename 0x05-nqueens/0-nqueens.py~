#!/usr/bin/python3
'''
A module to solve the n queens
'''

import sys


def print_solution(solution):
    """Prints a single solution in the required format."""
    print([[i, solution[i]] for i in range(len(solution))])

def is_safe(solution, row, col):
    """Checks if placing a queen at (row, col) is safe."""
    for prev_row in range(row):
        prev_col = solution[prev_row]
        # Check column and diagonal conflicts
        if prev_col == col or abs(prev_col - col) == abs(prev_row - row):
            return False
    return True

def solve_nqueens(n, row, solution, results):
    """Recursive backtracking function to find all solutions."""
    if row == n:
        results.append(solution[:])
        print_solution(solution)
        return

    for col in range(n):
        if is_safe(solution, row, col):
            solution[row] = col
            solve_nqueens(n, row + 1, solution, results)
            # Backtrack
            solution[row] = -1

def nqueens(n):
    """Solves the N Queens problem and prints all solutions."""
    solution = [-1] * n  # -1 indicates no queen placed in the row yet
    results = []
    solve_nqueens(n, 0, solution, results)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: nqueens N")
        sys.exit(1)

    try:
        N = int(sys.argv[1])
    except ValueError:
        print("N must be a number")
        sys.exit(1)

    if N < 4:
        print("N must be at least 4")
        sys.exit(1)

    nqueens(N)
